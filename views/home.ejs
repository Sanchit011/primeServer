<!-- 

    All what is down there in scripts is just bootstrap reference code
    here we take input from user via forms and save it using a post request


    we have done client side validation here so that we won't have to face any errors due to wrong inputs
    all the async calls are also error handled using wrapAsync function just in case you are able to put a request through postman or anything else
    wrapAsync will let the app break but it won't redirect you anywhere 

-->
    



<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title>Prime Number Generator</title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BmbxuPwQa2lc/FVzBcNJ7UAyJxM6wuqIj61tLrc4wSX0szH/Ev+nYRRuWlolflfl" crossorigin="anonymous">
    </head>
    <body class="d-flex flex-column">
        <div class="row">
            <h1 class="text-center mt-5 mb-5"> Welcome to Prime Number Generator </h1>
            <div class="col-6 offset-3">
                <form action="/primes" method="POST" novalidate class="validated-form">
                    <div class="mb-3">
                        <div class="form-floating mb-3">
                            <input type="username" class="form-control" id="username" placeholder="username" name="data[user]" required>
                            <label for="floatingInput">username</label>
                            <div class="valid-feedback">
                                Looks good!
                            </div>
                            <div class="invalid-feedback">
                                who is this
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="input-group input-group-lg">
                            <span class="input-group-text" id="inputGroup-sizing-lg">prime numbers between</span>
                            <input type="number" min = "0" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-lg" name="data[number1]" required>
                            <div class="valid-feedback">
                                Looks good!
                            </div>
                            <div class="invalid-feedback">
                                how will we find it then
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="input-group input-group-lg">
                            <span class="input-group-text" id="inputGroup-sizing-lg">and</span>
                            <input type="number" min = "0" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-lg" name="data[number2]" required>
                            <div class="valid-feedback">
                                Looks good!
                            </div>
                            <div class="invalid-feedback">
                                how will we find it then
                            </div>
                        </div>
                    </div>
                    <div class="mb-5">
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="data[algo]" id="getPrimes" value="getPrimes" required>
                            <label class="form-check-label" for="getPrimes">
                              Naive Method
                            </label>
                            <div class="invalid-feedback">
                                which algo do you want
                            </div>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="data[algo]" id="getPrimesOptimized" value="getPrimesOptimized" required>
                            <label class="form-check-label" for="getPrimesOptimized">
                              Somewhat Optimized
                            </label>
                            <div class="invalid-feedback">
                                which algo do you want
                            </div>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="data[algo]" id="seive" value="seive" required>
                            <label class="form-check-label" for="seive">
                              Seive of Eratosthenes
                            </label>
                            <div class="invalid-feedback">
                                which algo do you want
                            </div>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="data[algo]" id="seiveOptimized" value="seiveOptimized" required>
                            <label class="form-check-label" for="seiveOptimized">
                                Seive of Eratosthenes Optimized
                            </label>
                            <div class="invalid-feedback">
                                which algo do you want
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <button class="btn btn-success">Give me My primes</button>
                    </div>
                </form>
            </div>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.6.0/dist/umd/popper.min.js" integrity="sha384-KsvD1yqQ1/1+IA7gi3P0tyJcT3vR+NdBTt13hSJ2lnve8agRGXTTyNaBYmCR/Nwi" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.min.js" integrity="sha384-nsg8ua9HAw1y0W1btsyWgBklPnCUAFLuTMS2G72MMONqmOymq585AcH49TLBQObG" crossorigin="anonymous"></script>
        
        <script>
            // Example starter JavaScript for disabling form submissions if there are invalid fields
            (function () {
            'use strict'

            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            const forms = document.querySelectorAll('.validated-form')

            // Loop over them and prevent submission
            Array.from(forms)
                .forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                    event.preventDefault()
                    event.stopPropagation()
                    }

                    form.classList.add('was-validated')
                }, false)
                })
            })()
        </script>
        
    </body>
</html>